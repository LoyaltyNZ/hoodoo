var search_data = {"index":{"searchIndex":["apitools","activerecord","base","errormapping","finder","classmethods","uuid","communicators","fast","pool","queueentry","queuewithtimeout","slow","data","resources","account","balance","calculation","calculator","currency","errors","involvement","ledger","log","member","membership","outlet","participant","product","programme","purchase","token","transaction","version","voucher","types","basket","basketitem","calculatorcommon","calculatorconfiguration","currency","currencyamount","currencyearner","errorprimitive","product","voucherearner","errordescriptions","domaindescriptions","errors","missingreferencedata","unknowncode","generator","logger","communicator","fastcommunicator","fastwriter","filewriter","flattenermixin","logentriesdotcomwriter","payload","slowcommunicator","slowwriter","streamwriter","writermixin","presenters","array","base","basedsl","boolean","commonresourcefields","date","datetime","decimal","enum","field","float","hash","integer","object","string","tags","text","uuid","serviceapplication","servicecontext","serviceimplementation","serviceinterface","tolist","tolistdsl","servicemiddleware","amqplogmessage","amqendpoint","amqplogwriter","exceptionreporting","airbrakereporter","basereporter","payload","raygunreporter","permissions","serviceendpoint","augmentedarray","augmentedbase","augmentedhash","serviceregistrydrbserver","servicerequest","listparameters","serviceresponse","servicesession","stringinquirer","uuid","utilities","rack","server","uuidvalidator","<<()","actions()","add()","add()","add()","add()","add_error()","add_error()","add_errors()","add_header()","add_precompiled_error()","add_precompiled_error()","adds_errors_to?()","adds_errors_to?()","array()","boolean()","call()","call()","clear_errors()","communicate()","communicate()","communicate()","communicate()","communicate()","component_interfaces()","component_interfaces()","comprised_of()","create()","create()","date()","datetime()","debug()","decimal()","default()","default_sort_direction()","delete()","delete()","describe()","deserialize()","dropped()","dropped()","dropped?()","embeds()","endpoint()","enum()","environment()","error()","error()","errors_for()","errors_for()","filter()","find()","flatten()","float()","for_rack()","full_path()","generate()","get_header()","get_schema()","get_schema_definition()","halt_processing?()","has_all_roles?()","has_any_roles?()","has_default?()","has_errors?()","has_memcache?()","has_role?()","hash()","headers()","included()","included()","info()","inherited()","instances()","instantiate()","instantiate()","integer()","inter_resource()","inter_resource_local()","inter_resource_remote()","interface()","interface()","internationalised()","is_internationalised?()","is_internationalised?()","key()","keys()","limit()","list()","list()","list_filter_map()","list_finder()","list_search_map()","load_session()","local_service_for()","logger()","merge!()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","not_found()","object()","on_queue?()","ping()","platform_errors()","platform_errors()","polymorphic_find()","polymorphic_id_fields()","public_actions()","racks_original_start()","read_at_path()","recognised?()","record_host_and_port()","remote_service_for()","remove()","remove()","remove()","remove_all()","rename()","render()","render()","render()","render()","render()","render()","report()","report()","report()","report()","report()","report()","report()","report()","report()","report()","report?()","resource()","resource()","rewrite_path()","run!()","schema()","search()","serialize()","set_log_folder()","set_logger()","set_platform_errors()","shift()","show()","show()","sort()","spare_port()","start()","start()","start_and_record_host_and_port()","stop()","string()","stringify()","symbolize()","sync?()","tags()","terminate()","terminate?()","testing()","text()","to_create()","to_h()","to_integer?()","to_list()","to_list()","to_update()","translate_errors_from_other_resource()","type()","unjoin_and_unescape_commas()","update()","update()","update()","update_same_as_create()","uri()","uri_path_components=()","uuid()","valid?()","validate()","validate()","validate()","validate()","validate()","validate()","validate()","validate()","validate()","validate()","validate()","validate()","validate()","validate()","validate()","validate_each()","version()","wait()","wait()","wait()","warn()","readme"],"longSearchIndex":["apitools","apitools::activerecord","apitools::activerecord::base","apitools::activerecord::errormapping","apitools::activerecord::finder","apitools::activerecord::finder::classmethods","apitools::activerecord::uuid","apitools::communicators","apitools::communicators::fast","apitools::communicators::pool","apitools::communicators::pool::queueentry","apitools::communicators::pool::queuewithtimeout","apitools::communicators::slow","apitools::data","apitools::data::resources","apitools::data::resources::account","apitools::data::resources::balance","apitools::data::resources::calculation","apitools::data::resources::calculator","apitools::data::resources::currency","apitools::data::resources::errors","apitools::data::resources::involvement","apitools::data::resources::ledger","apitools::data::resources::log","apitools::data::resources::member","apitools::data::resources::membership","apitools::data::resources::outlet","apitools::data::resources::participant","apitools::data::resources::product","apitools::data::resources::programme","apitools::data::resources::purchase","apitools::data::resources::token","apitools::data::resources::transaction","apitools::data::resources::version","apitools::data::resources::voucher","apitools::data::types","apitools::data::types::basket","apitools::data::types::basketitem","apitools::data::types::calculatorcommon","apitools::data::types::calculatorconfiguration","apitools::data::types::currency","apitools::data::types::currencyamount","apitools::data::types::currencyearner","apitools::data::types::errorprimitive","apitools::data::types::product","apitools::data::types::voucherearner","apitools::errordescriptions","apitools::errordescriptions::domaindescriptions","apitools::errors","apitools::errors::missingreferencedata","apitools::errors::unknowncode","apitools::generator","apitools::logger","apitools::logger::communicator","apitools::logger::fastcommunicator","apitools::logger::fastwriter","apitools::logger::filewriter","apitools::logger::flattenermixin","apitools::logger::logentriesdotcomwriter","apitools::logger::payload","apitools::logger::slowcommunicator","apitools::logger::slowwriter","apitools::logger::streamwriter","apitools::logger::writermixin","apitools::presenters","apitools::presenters::array","apitools::presenters::base","apitools::presenters::basedsl","apitools::presenters::boolean","apitools::presenters::commonresourcefields","apitools::presenters::date","apitools::presenters::datetime","apitools::presenters::decimal","apitools::presenters::enum","apitools::presenters::field","apitools::presenters::float","apitools::presenters::hash","apitools::presenters::integer","apitools::presenters::object","apitools::presenters::string","apitools::presenters::tags","apitools::presenters::text","apitools::presenters::uuid","apitools::serviceapplication","apitools::servicecontext","apitools::serviceimplementation","apitools::serviceinterface","apitools::serviceinterface::tolist","apitools::serviceinterface::tolistdsl","apitools::servicemiddleware","apitools::servicemiddleware::amqplogmessage","apitools::servicemiddleware::amqplogmessage::amqendpoint","apitools::servicemiddleware::amqplogwriter","apitools::servicemiddleware::exceptionreporting","apitools::servicemiddleware::exceptionreporting::airbrakereporter","apitools::servicemiddleware::exceptionreporting::basereporter","apitools::servicemiddleware::exceptionreporting::payload","apitools::servicemiddleware::exceptionreporting::raygunreporter","apitools::servicemiddleware::permissions","apitools::servicemiddleware::serviceendpoint","apitools::servicemiddleware::serviceendpoint::augmentedarray","apitools::servicemiddleware::serviceendpoint::augmentedbase","apitools::servicemiddleware::serviceendpoint::augmentedhash","apitools::servicemiddleware::serviceregistrydrbserver","apitools::servicerequest","apitools::servicerequest::listparameters","apitools::serviceresponse","apitools::servicesession","apitools::stringinquirer","apitools::uuid","apitools::utilities","rack","rack::server","uuidvalidator","apitools::communicators::pool::queuewithtimeout#<<()","apitools::serviceinterface#actions()","apitools::communicators::pool#add()","apitools::logger#add()","apitools::servicemiddleware::exceptionreporting::add()","apitools::servicemiddleware::serviceregistrydrbserver#add()","apitools::errors#add_error()","apitools::serviceresponse#add_error()","apitools::serviceresponse#add_errors()","apitools::serviceresponse#add_header()","apitools::errors#add_precompiled_error()","apitools::serviceresponse#add_precompiled_error()","apitools::activerecord::errormapping#adds_errors_to?()","apitools::servicemiddleware::serviceendpoint::augmentedbase#adds_errors_to?()","apitools::presenters::basedsl#array()","apitools::presenters::basedsl#boolean()","apitools::serviceapplication#call()","apitools::servicemiddleware#call()","apitools::errors#clear_errors()","apitools::communicators::fast#communicate()","apitools::communicators::pool#communicate()","apitools::communicators::slow#communicate()","apitools::logger::communicator#communicate()","apitools::servicemiddleware::exceptionreporting::basereporter#communicate()","apitools::serviceapplication#component_interfaces()","apitools::serviceapplication::component_interfaces()","apitools::serviceapplication::comprised_of()","apitools::serviceimplementation#create()","apitools::servicemiddleware::serviceendpoint#create()","apitools::presenters::basedsl#date()","apitools::presenters::basedsl#datetime()","apitools::logger#debug()","apitools::presenters::basedsl#decimal()","apitools::serviceinterface::tolistdsl#default()","apitools::serviceinterface::tolist#default_sort_direction()","apitools::serviceimplementation#delete()","apitools::servicemiddleware::serviceendpoint#delete()","apitools::errordescriptions#describe()","apitools::servicemiddleware::amqplogmessage#deserialize()","apitools::communicators::slow#dropped()","apitools::logger::communicator#dropped()","apitools::communicators::pool::queueentry#dropped?()","apitools::serviceinterface#embeds()","apitools::serviceinterface#endpoint()","apitools::presenters::basedsl#enum()","apitools::servicemiddleware::environment()","apitools::errordescriptions::domaindescriptions#error()","apitools::logger#error()","apitools::errordescriptions#errors_for()","apitools::serviceinterface#errors_for()","apitools::serviceinterface::tolistdsl#filter()","apitools::servicemiddleware::serviceregistrydrbserver#find()","apitools::logger::flattenermixin#flatten()","apitools::presenters::basedsl#float()","apitools::serviceresponse#for_rack()","apitools::presenters::field#full_path()","apitools::uuid::generate()","apitools::serviceresponse#get_header()","apitools::presenters::base::get_schema()","apitools::presenters::base::get_schema_definition()","apitools::serviceresponse#halt_processing?()","apitools::servicesession#has_all_roles?()","apitools::servicesession#has_any_roles?()","apitools::presenters::field#has_default?()","apitools::errors#has_errors?()","apitools::servicemiddleware::has_memcache?()","apitools::servicesession#has_role?()","apitools::presenters::basedsl#hash()","apitools::serviceresponse#headers()","apitools::activerecord::finder::included()","apitools::activerecord::uuid::included()","apitools::logger#info()","apitools::activerecord::base::inherited()","apitools::logger#instances()","apitools::activerecord::finder::instantiate()","apitools::activerecord::uuid::instantiate()","apitools::presenters::basedsl#integer()","apitools::servicemiddleware#inter_resource()","apitools::servicemiddleware#inter_resource_local()","apitools::servicemiddleware#inter_resource_remote()","apitools::serviceinterface::interface()","apitools::servicemiddleware::serviceendpoint#interface()","apitools::presenters::basedsl#internationalised()","apitools::presenters::base::is_internationalised?()","apitools::presenters::basedsl#is_internationalised?()","apitools::presenters::hash#key()","apitools::presenters::hash#keys()","apitools::serviceinterface::tolistdsl#limit()","apitools::serviceimplementation#list()","apitools::servicemiddleware::serviceendpoint#list()","apitools::activerecord::finder::classmethods#list_filter_map()","apitools::activerecord::finder::classmethods#list_finder()","apitools::activerecord::finder::classmethods#list_search_map()","apitools::servicesession::load_session()","apitools::servicemiddleware#local_service_for()","apitools::servicemiddleware::logger()","apitools::errors#merge!()","apitools::communicators::pool::new()","apitools::communicators::pool::queueentry::new()","apitools::communicators::pool::queuewithtimeout::new()","apitools::errordescriptions::new()","apitools::errordescriptions::domaindescriptions::new()","apitools::errors::new()","apitools::logger::new()","apitools::logger::communicator::new()","apitools::logger::filewriter::new()","apitools::logger::logentriesdotcomwriter::new()","apitools::logger::payload::new()","apitools::logger::streamwriter::new()","apitools::presenters::decimal::new()","apitools::presenters::enum::new()","apitools::presenters::field::new()","apitools::presenters::object::new()","apitools::presenters::string::new()","apitools::presenters::uuid::new()","apitools::servicecontext::new()","apitools::serviceinterface::tolist::new()","apitools::serviceinterface::tolistdsl::new()","apitools::servicemiddleware::new()","apitools::servicemiddleware::amqplogmessage::new()","apitools::servicemiddleware::amqplogwriter::new()","apitools::servicemiddleware::exceptionreporting::payload::new()","apitools::servicemiddleware::serviceendpoint::new()","apitools::servicemiddleware::serviceregistrydrbserver::new()","apitools::servicerequest::new()","apitools::servicerequest::listparameters::new()","apitools::serviceresponse::new()","apitools::servicesession::new()","apitools::serviceresponse#not_found()","apitools::presenters::basedsl#object()","apitools::servicemiddleware::on_queue?()","apitools::servicemiddleware::serviceregistrydrbserver#ping()","apitools::activerecord::errormapping#platform_errors()","apitools::servicemiddleware::serviceendpoint::augmentedbase#platform_errors()","apitools::activerecord::finder::classmethods#polymorphic_find()","apitools::activerecord::finder::classmethods#polymorphic_id_fields()","apitools::serviceinterface#public_actions()","rack::server::racks_original_start()","apitools::presenters::field#read_at_path()","apitools::errordescriptions#recognised?()","apitools::servicemiddleware::record_host_and_port()","apitools::servicemiddleware#remote_service_for()","apitools::communicators::pool#remove()","apitools::logger#remove()","apitools::servicemiddleware::exceptionreporting::remove()","apitools::logger#remove_all()","apitools::presenters::field#rename()","apitools::errors#render()","apitools::presenters::array#render()","apitools::presenters::base::render()","apitools::presenters::field#render()","apitools::presenters::hash#render()","apitools::presenters::object#render()","apitools::logger#report()","apitools::logger::filewriter#report()","apitools::logger::logentriesdotcomwriter#report()","apitools::logger::streamwriter#report()","apitools::logger::writermixin#report()","apitools::servicemiddleware::amqplogwriter#report()","apitools::servicemiddleware::exceptionreporting::report()","apitools::servicemiddleware::exceptionreporting::airbrakereporter#report()","apitools::servicemiddleware::exceptionreporting::basereporter#report()","apitools::servicemiddleware::exceptionreporting::raygunreporter#report()","apitools::logger#report?()","apitools::presenters::basedsl#resource()","apitools::servicecontext#resource()","apitools::presenters::field#rewrite_path()","apitools::generator#run!()","apitools::presenters::base::schema()","apitools::serviceinterface::tolistdsl#search()","apitools::servicemiddleware::amqplogmessage#serialize()","apitools::servicemiddleware::set_log_folder()","apitools::servicemiddleware::set_logger()","apitools::servicemiddleware::serviceendpoint::augmentedbase#set_platform_errors()","apitools::communicators::pool::queuewithtimeout#shift()","apitools::serviceimplementation#show()","apitools::servicemiddleware::serviceendpoint#show()","apitools::serviceinterface::tolistdsl#sort()","apitools::utilities::spare_port()","apitools::servicemiddleware::serviceregistrydrbserver::start()","rack::server::start()","rack::server::start_and_record_host_and_port()","apitools::servicemiddleware::serviceregistrydrbserver#stop()","apitools::presenters::basedsl#string()","apitools::utilities::stringify()","apitools::utilities::symbolize()","apitools::communicators::pool::queueentry#sync?()","apitools::presenters::basedsl#tags()","apitools::communicators::pool#terminate()","apitools::communicators::pool::queueentry#terminate?()","apitools::servicesession::testing()","apitools::presenters::basedsl#text()","apitools::serviceinterface#to_create()","apitools::servicesession#to_h()","apitools::utilities::to_integer?()","apitools::serviceinterface::to_list()","apitools::serviceinterface#to_list()","apitools::serviceinterface#to_update()","apitools::servicemiddleware#translate_errors_from_other_resource()","apitools::presenters::basedsl#type()","apitools::errors#unjoin_and_unescape_commas()","apitools::serviceimplementation#update()","apitools::servicemiddleware::amqplogmessage#update()","apitools::servicemiddleware::serviceendpoint#update()","apitools::serviceinterface#update_same_as_create()","apitools::servicemiddleware::serviceregistrydrbserver::uri()","apitools::servicerequest#uri_path_components=()","apitools::presenters::basedsl#uuid()","apitools::uuid::valid?()","apitools::presenters::array#validate()","apitools::presenters::base::validate()","apitools::presenters::boolean#validate()","apitools::presenters::date#validate()","apitools::presenters::datetime#validate()","apitools::presenters::decimal#validate()","apitools::presenters::enum#validate()","apitools::presenters::field#validate()","apitools::presenters::float#validate()","apitools::presenters::hash#validate()","apitools::presenters::integer#validate()","apitools::presenters::object#validate()","apitools::presenters::string#validate()","apitools::presenters::text#validate()","apitools::presenters::uuid#validate()","uuidvalidator#validate_each()","apitools::serviceinterface#version()","apitools::communicators::pool#wait()","apitools::logger#wait()","apitools::servicemiddleware::exceptionreporting::wait()","apitools::logger#warn()",""],"info":[["ApiTools","","classes/ApiTools.html","","<p>File &mdash; uuid_validator.rb\n<p>(C) &mdash; Loyalty New Zealand 2014\n<p>Purpose &mdash; UUID validator for models.\n"],["ApiTools::ActiveRecord","","classes/ApiTools/ActiveRecord.html","","<p>Support mixins for models subclassed from ActiveRecord::Base. See:\n<p>guides.rubyonrails.org/active_record_basics.html …\n\n"],["ApiTools::ActiveRecord::Base","","classes/ApiTools/ActiveRecord/Base.html","","<p>While individual ActiveRecord mixins can be included as and when needed, if\nyou want everything, just …\n"],["ApiTools::ActiveRecord::ErrorMapping","","classes/ApiTools/ActiveRecord/ErrorMapping.html","","<p>Support mixin for models subclassed from ActiveRecord::Base providing a\nmapping between ActiveRecord …\n"],["ApiTools::ActiveRecord::Finder","","classes/ApiTools/ActiveRecord/Finder.html","","<p>Support mixin for models subclassed from ActiveRecord::Base providing\nsupport methods to handle common …\n"],["ApiTools::ActiveRecord::Finder::ClassMethods","","classes/ApiTools/ActiveRecord/Finder/ClassMethods.html","","<p>Collection of class methods that get defined on an including class via\nApiTools::ActiveRecord::Finder::included …\n"],["ApiTools::ActiveRecord::UUID","","classes/ApiTools/ActiveRecord/UUID.html","","<p>Support mixin for models subclassed from ActiveRecord::Base providing\nautomatic UUID management. See: …\n"],["ApiTools::Communicators","","classes/ApiTools/Communicators.html","",""],["ApiTools::Communicators::Fast","","classes/ApiTools/Communicators/Fast.html","","<p>See ApiTools::Communicators::Pool for details.\n<p>A “fast communicator”. Subclass this to create …\n"],["ApiTools::Communicators::Pool","","classes/ApiTools/Communicators/Pool.html","",""],["ApiTools::Communicators::Pool::QueueEntry","","classes/ApiTools/Communicators/Pool/QueueEntry.html","","<p>Internal implementation detail of ApiTools::Communicators::Pool which is\nplaced on a Ruby Queue and used …\n"],["ApiTools::Communicators::Pool::QueueWithTimeout","","classes/ApiTools/Communicators/Pool/QueueWithTimeout.html","","<p>Internal implementation detail of ApiTools::Communicators::Pool.\n<p>Since pool clients can say “wait …\n"],["ApiTools::Communicators::Slow","","classes/ApiTools/Communicators/Slow.html","","<p>See ApiTools::Communicators::Pool for details.\n<p>A “slow communicator”. Subclass this to create …\n"],["ApiTools::Data","","classes/ApiTools/Data.html","",""],["ApiTools::Data::Resources","","classes/ApiTools/Data/Resources.html","","<p>Module used as a namespace to collect classes that represent Resources\ndocumented by the your platform&#39;s …\n"],["ApiTools::Data::Resources::Account","","classes/ApiTools/Data/Resources/Account.html","","<p>Documented Platform API Resource &#39;Account&#39;.\n"],["ApiTools::Data::Resources::Balance","","classes/ApiTools/Data/Resources/Balance.html","","<p>Documented Platform API Resource &#39;Balance&#39;.\n"],["ApiTools::Data::Resources::Calculation","","classes/ApiTools/Data/Resources/Calculation.html","","<p>Documented Platform API Resource &#39;Calculation&#39;.\n"],["ApiTools::Data::Resources::Calculator","","classes/ApiTools/Data/Resources/Calculator.html","","<p>Documented Platform API Resource &#39;Calculator&#39;.\n"],["ApiTools::Data::Resources::Currency","","classes/ApiTools/Data/Resources/Currency.html","","<p>Documented Platform API Resource &#39;Currency&#39;.\n"],["ApiTools::Data::Resources::Errors","","classes/ApiTools/Data/Resources/Errors.html","","<p>Documented Platform API Resource &#39;Errors&#39;.\n"],["ApiTools::Data::Resources::Involvement","","classes/ApiTools/Data/Resources/Involvement.html","","<p>Documented Platform API Resource &#39;Involvement&#39;.\n"],["ApiTools::Data::Resources::Ledger","","classes/ApiTools/Data/Resources/Ledger.html","","<p>Documented Platform API Resource &#39;Ledger&#39;.\n"],["ApiTools::Data::Resources::Log","","classes/ApiTools/Data/Resources/Log.html","","<p>Documented Platform API Resource &#39;Log&#39;.\n"],["ApiTools::Data::Resources::Member","","classes/ApiTools/Data/Resources/Member.html","","\n<pre><code>Since Member references Account and Account references Member, we have\nto define a dummy Member class ...</code></pre>\n"],["ApiTools::Data::Resources::Membership","","classes/ApiTools/Data/Resources/Membership.html","","<p>Documented Platform API Resource &#39;Membership&#39;.\n"],["ApiTools::Data::Resources::Outlet","","classes/ApiTools/Data/Resources/Outlet.html","","<p>Documented Platform API Resource &#39;Outlet&#39;.\n"],["ApiTools::Data::Resources::Participant","","classes/ApiTools/Data/Resources/Participant.html","","<p>Documented Platform API Resource &#39;Participant&#39;.\n"],["ApiTools::Data::Resources::Product","","classes/ApiTools/Data/Resources/Product.html","","<p>Documented Platform API Resource &#39;Product&#39;.\n"],["ApiTools::Data::Resources::Programme","","classes/ApiTools/Data/Resources/Programme.html","","<p>Documented Platform API Resource &#39;Programme&#39;.\n"],["ApiTools::Data::Resources::Purchase","","classes/ApiTools/Data/Resources/Purchase.html","","<p>Documented Platform API Resource &#39;Purchase&#39;.\n"],["ApiTools::Data::Resources::Token","","classes/ApiTools/Data/Resources/Token.html","","<p>Documented Platform API Resource &#39;Token&#39;.\n"],["ApiTools::Data::Resources::Transaction","","classes/ApiTools/Data/Resources/Transaction.html","","<p>Documented Platform API Resource &#39;Transaction&#39;.\n"],["ApiTools::Data::Resources::Version","","classes/ApiTools/Data/Resources/Version.html","","<p>Documented Platform API Resource &#39;Version&#39;. This is an example that\nties in with the example …\n"],["ApiTools::Data::Resources::Voucher","","classes/ApiTools/Data/Resources/Voucher.html","","<p>Documented Platform API Resource &#39;Voucher&#39;.\n"],["ApiTools::Data::Types","","classes/ApiTools/Data/Types.html","","<p>Module used as a namespace to collect classes that represent Types\ndocumented by your platform&#39;s …\n"],["ApiTools::Data::Types::Basket","","classes/ApiTools/Data/Types/Basket.html","","<p>Documented Platform API Type &#39;Basket&#39;.\n"],["ApiTools::Data::Types::BasketItem","","classes/ApiTools/Data/Types/BasketItem.html","","<p>Documented Platform API Type &#39;BasketItem&#39;.\n"],["ApiTools::Data::Types::CalculatorCommon","","classes/ApiTools/Data/Types/CalculatorCommon.html","","<p>Documented Platform API Type &#39;CalculatorCommon&#39;.\n"],["ApiTools::Data::Types::CalculatorConfiguration","","classes/ApiTools/Data/Types/CalculatorConfiguration.html","","<p>Documented Platform API Type &#39;CalculatorConfiguration&#39;.\n"],["ApiTools::Data::Types::Currency","","classes/ApiTools/Data/Types/Currency.html","","<p>Documented Platform API Type &#39;Currency&#39;.\n"],["ApiTools::Data::Types::CurrencyAmount","","classes/ApiTools/Data/Types/CurrencyAmount.html","","<p>Documented Platform API Type &#39;CurrencyAmount&#39;.\n"],["ApiTools::Data::Types::CurrencyEarner","","classes/ApiTools/Data/Types/CurrencyEarner.html","","<p>Documented Platform API Type &#39;CurrencyEarner&#39;.\n"],["ApiTools::Data::Types::ErrorPrimitive","","classes/ApiTools/Data/Types/ErrorPrimitive.html","","<p>Documented Platform API Type &#39;ErrorPrimitive&#39;.\n"],["ApiTools::Data::Types::Product","","classes/ApiTools/Data/Types/Product.html","","<p>Documented Platform API Type &#39;Product&#39;.\n"],["ApiTools::Data::Types::VoucherEarner","","classes/ApiTools/Data/Types/VoucherEarner.html","","<p>Documented Platform API Type &#39;VoucherEarner&#39;.\n"],["ApiTools::ErrorDescriptions","","classes/ApiTools/ErrorDescriptions.html","","<p>A collection of error descriptions. API service implementations create one\nof these, which self-declares …\n"],["ApiTools::ErrorDescriptions::DomainDescriptions","","classes/ApiTools/ErrorDescriptions/DomainDescriptions.html","","<p>Contain a description of errors for a particular domain, where the domain\nis a grouping string such as …\n"],["ApiTools::Errors","","classes/ApiTools/Errors.html","","<p>During request processing, API service implementations create an\nApiTools::Errors instance and add error(s) …\n"],["ApiTools::Errors::MissingReferenceData","","classes/ApiTools/Errors/MissingReferenceData.html","","<p>Custom exception thrown when an error is added to a collection without\nincluding required reference data …\n"],["ApiTools::Errors::UnknownCode","","classes/ApiTools/Errors/UnknownCode.html","","<p>Custom exception thrown when an unknown error code is added to a\ncollection.\n"],["ApiTools::Generator","","classes/ApiTools/Generator.html","",""],["ApiTools::Logger","","classes/ApiTools/Logger.html","","<p>Multiple output logging via local code or external services. Instantiate a\nnew Logger, then use #add …\n"],["ApiTools::Logger::Communicator","","classes/ApiTools/Logger/Communicator.html","","<p>Mixin used internally for the FastCommunicator and SlowCommunicator\nwrappers that hide implementation …\n"],["ApiTools::Logger::FastCommunicator","","classes/ApiTools/Logger/FastCommunicator.html","","<p>Used internally as an ApiTools::Communicator::Pool communicator wrapping\nfast log writer instances.\n"],["ApiTools::Logger::FastWriter","","classes/ApiTools/Logger/FastWriter.html","","<p>Log writer classes are used through the ApiTools::Logger class.\n<p>Subclass FastWriter if you are writing …\n"],["ApiTools::Logger::FileWriter","","classes/ApiTools/Logger/FileWriter.html","","<p>Writes unstructured messages to a file. ApiTools::Logger::SlowWriter\nsubclass. See also ApiTools::Logger …\n"],["ApiTools::Logger::FlattenerMixin","","classes/ApiTools/Logger/FlattenerMixin.html","","<p>This mixin is used by custom logger subclasses and defines a single method,\nApiTools::Logger::FlattenerMixin#flatten …\n"],["ApiTools::Logger::LogEntriesDotComWriter","","classes/ApiTools/Logger/LogEntriesDotComWriter.html","","<p>Writes structured messages to logentries.com via the “le” gem, which uses\nits own asynchronous …\n"],["ApiTools::Logger::Payload","","classes/ApiTools/Logger/Payload.html","","<p>Used internally toommunicate details of a log message across the\nApiTools::Communicators::Pool mechanism …\n"],["ApiTools::Logger::SlowCommunicator","","classes/ApiTools/Logger/SlowCommunicator.html","","<p>Used internally as an ApiTools::Communicator::Pool communicator wrapping\nslow log writer instances.\n"],["ApiTools::Logger::SlowWriter","","classes/ApiTools/Logger/SlowWriter.html","","<p>Log writer classes are used through the ApiTools::Logger class.\n<p>Subclass SlowWriter if you are writing …\n"],["ApiTools::Logger::StreamWriter","","classes/ApiTools/Logger/StreamWriter.html","","<p>Writes unstructured messages to (presumed) fast output streams such as\n+$stdout+. ApiTools::Logger::FastWriter …\n"],["ApiTools::Logger::WriterMixin","","classes/ApiTools/Logger/WriterMixin.html","","<p>This mixin is used by ApiTools::Logger::FastWriter and\nApiTools::Logger::SlowWriter. See those two classes …\n"],["ApiTools::Presenters","","classes/ApiTools/Presenters.html","",""],["ApiTools::Presenters::Array","","classes/ApiTools/Presenters/Array.html","","<p>A JSON array schema member\n"],["ApiTools::Presenters::Base","","classes/ApiTools/Presenters/Base.html","","<p>Base functionality for JSON validation and presenter (rendering) layers.\nSubclass this to define a schema …\n"],["ApiTools::Presenters::BaseDSL","","classes/ApiTools/Presenters/BaseDSL.html","","<p>A mixin to be used by any presenter that wants to support the\nApiTools::Presenters family of schema  …\n"],["ApiTools::Presenters::Boolean","","classes/ApiTools/Presenters/Boolean.html","","<p>A JSON boolean schema member\n"],["ApiTools::Presenters::CommonResourceFields","","classes/ApiTools/Presenters/CommonResourceFields.html","","<p>Used internally for additional validation of common Resource fields. See\nApiTools::Presenters::Base::validate …\n"],["ApiTools::Presenters::Date","","classes/ApiTools/Presenters/Date.html","","<p>A JSON date schema member\n"],["ApiTools::Presenters::DateTime","","classes/ApiTools/Presenters/DateTime.html","","<p>A JSON datetime schema member\n"],["ApiTools::Presenters::Decimal","","classes/ApiTools/Presenters/Decimal.html","","<p>A JSON decimal schema member\n"],["ApiTools::Presenters::Enum","","classes/ApiTools/Presenters/Enum.html","","<p>A JSON string schema member. An enumeration (of sorts) - a list of discrete\nstring values that are permitted …\n"],["ApiTools::Presenters::Field","","classes/ApiTools/Presenters/Field.html","","<p>A JSON schema member\n"],["ApiTools::Presenters::Float","","classes/ApiTools/Presenters/Float.html","","<p>A JSON float schema member\n"],["ApiTools::Presenters::Hash","","classes/ApiTools/Presenters/Hash.html","","<p>A JSON hash schema member\n"],["ApiTools::Presenters::Integer","","classes/ApiTools/Presenters/Integer.html","","<p>A JSON integer schema member\n"],["ApiTools::Presenters::Object","","classes/ApiTools/Presenters/Object.html","","<p>A JSON object schema member\n"],["ApiTools::Presenters::String","","classes/ApiTools/Presenters/String.html","","<p>A JSON string schema member\n"],["ApiTools::Presenters::Tags","","classes/ApiTools/Presenters/Tags.html","","<p>A JSON UUID schema member\n"],["ApiTools::Presenters::Text","","classes/ApiTools/Presenters/Text.html","","<p>A JSON string schema member - unlimited length string\n"],["ApiTools::Presenters::UUID","","classes/ApiTools/Presenters/UUID.html","","<p>A JSON UUID schema member\n"],["ApiTools::ServiceApplication","","classes/ApiTools/ServiceApplication.html","","<p>ApiTools::ServiceApplication is subclassed by people writing service\nimplementations; the subclasses …\n"],["ApiTools::ServiceContext","","classes/ApiTools/ServiceContext.html","","<p>A collection of objects which describe the context in which a service is\nbeing called. The service reads …\n"],["ApiTools::ServiceImplementation","","classes/ApiTools/ServiceImplementation.html","","<p>Service authors subclass this to produce the body of their service\ninterface implementation. It defines …\n"],["ApiTools::ServiceInterface","","classes/ApiTools/ServiceInterface.html","","<p>Service implementation authors subclass this to describe the interface that\nthey implement for a particular …\n"],["ApiTools::ServiceInterface::ToList","","classes/ApiTools/ServiceInterface/ToList.html","","<p>A class containing a series of accessors that describe allowed parameters\nin a “list” call …\n"],["ApiTools::ServiceInterface::ToListDSL","","classes/ApiTools/ServiceInterface/ToListDSL.html","","<p>Implementation of the DSL that&#39;s written inside a block passed to\nApiTools::ServiceInterface#to_list …\n"],["ApiTools::ServiceMiddleware","","classes/ApiTools/ServiceMiddleware.html","","<p>Rack middleware, declared in (e.g.) a <code>config.ru</code> file in the\nusual way:\n\n<pre><code>use( ApiTools::ServiceMiddleware ...</code></pre>\n"],["ApiTools::ServiceMiddleware::AMQPLogMessage","","classes/ApiTools/ServiceMiddleware/AMQPLogMessage.html","","<p>For AMQEndpoint gem users, the AMQPLogMessage class provides an\nAMQEndpoint::Message subclass used for …\n"],["ApiTools::ServiceMiddleware::AMQPLogMessage::AMQEndpoint","","classes/ApiTools/ServiceMiddleware/AMQPLogMessage/AMQEndpoint.html","",""],["ApiTools::ServiceMiddleware::AMQPLogWriter","","classes/ApiTools/ServiceMiddleware/AMQPLogWriter.html","","<p>Log writer which sends structured messages to an AMQP-based queue via the\nAlchemy and AMQEndpoint gems. …\n"],["ApiTools::ServiceMiddleware::ExceptionReporting","","classes/ApiTools/ServiceMiddleware/ExceptionReporting.html","","<p>Exception reporting / monitoring through external services.\n"],["ApiTools::ServiceMiddleware::ExceptionReporting::AirbrakeReporter","","classes/ApiTools/ServiceMiddleware/ExceptionReporting/AirbrakeReporter.html","","<p>ApiTools::ServiceMiddleware::ExceptionReporting::BaseReporter subclass\ngiving ApiTools::ServiceMiddleware::ExceptionReporting …\n"],["ApiTools::ServiceMiddleware::ExceptionReporting::BaseReporter","","classes/ApiTools/ServiceMiddleware/ExceptionReporting/BaseReporter.html","","<p>Subclass this method to create a custom class used to contact external\nexception monitoring / reporting …\n"],["ApiTools::ServiceMiddleware::ExceptionReporting::Payload","","classes/ApiTools/ServiceMiddleware/ExceptionReporting/Payload.html","","<p>Implementation detail of ApiTools::ServiceMiddleware::ExceptionReporting\nused to carry multiple parameters …\n"],["ApiTools::ServiceMiddleware::ExceptionReporting::RaygunReporter","","classes/ApiTools/ServiceMiddleware/ExceptionReporting/RaygunReporter.html","","<p>ApiTools::ServiceMiddleware::ExceptionReporting::BaseReporter subclass\ngiving ApiTools::ServiceMiddleware::ExceptionReporting …\n"],["ApiTools::ServiceMiddleware::Permissions","","classes/ApiTools/ServiceMiddleware/Permissions.html","",""],["ApiTools::ServiceMiddleware::ServiceEndpoint","","classes/ApiTools/ServiceMiddleware/ServiceEndpoint.html","","<p>Representation of a callable service endpoint for a specific resource. When\nthe implementation of one …\n"],["ApiTools::ServiceMiddleware::ServiceEndpoint::AugmentedArray","","classes/ApiTools/ServiceMiddleware/ServiceEndpoint/AugmentedArray.html","","<p>Ruby standard library Array subclass which mixes in\nApiTools::ServiceMiddleware::ServiceEndpoint::AugmentedBase …\n"],["ApiTools::ServiceMiddleware::ServiceEndpoint::AugmentedBase","","classes/ApiTools/ServiceMiddleware/ServiceEndpoint/AugmentedBase.html","","<p>Base mixin for ApiTools::ServiceMiddleware::ServiceEndpoint::AugmentedHash\nand ApiTools::ServiceMiddleware::ServiceEndpoint::AugmentedArray …\n"],["ApiTools::ServiceMiddleware::ServiceEndpoint::AugmentedHash","","classes/ApiTools/ServiceMiddleware/ServiceEndpoint/AugmentedHash.html","","<p>Ruby standard library Hash subclass which mixes in\nApiTools::ServiceMiddleware::ServiceEndpoint::AugmentedBase …\n"],["ApiTools::ServiceMiddleware::ServiceRegistryDRbServer","","classes/ApiTools/ServiceMiddleware/ServiceRegistryDRbServer.html","","<p>A registry of service endpoints, implenented as a DRB server class. An\ninternal implementation detail …\n"],["ApiTools::ServiceRequest","","classes/ApiTools/ServiceRequest.html","","<p>Instances of the ApiTools::ServiceRequest class are passed to service\ninterface implementations when …\n"],["ApiTools::ServiceRequest::ListParameters","","classes/ApiTools/ServiceRequest/ListParameters.html","","<p>Encapsulation of all parameters related only to modifying a list of\nresults. Other parameters may modify …\n"],["ApiTools::ServiceResponse","","classes/ApiTools/ServiceResponse.html","","<p>The service middleware creates an ApiTools::ServiceResponse instance for\neach request it handles, populating …\n"],["ApiTools::ServiceSession","","classes/ApiTools/ServiceSession.html","","<p><code>ServiceSession</code> contains all functionality related to a context\nsession.\n"],["ApiTools::StringInquirer","","classes/ApiTools/StringInquirer.html","","<p>Given a string, provides an object that takes the string&#39;s value and\nturns it into a method “#{value}?”, …\n"],["ApiTools::UUID","","classes/ApiTools/UUID.html","","<p>Class that handles generation and validation of UUIDs. Whenever you want to\nassociate an identifier with …\n"],["ApiTools::Utilities","","classes/ApiTools/Utilities.html","","<p>Useful tools, especially for those working without Rails components.\n"],["Rack","","classes/Rack.html","",""],["Rack::Server","","classes/Rack/Server.html","",""],["UuidValidator","","classes/UuidValidator.html","","<p>Provides simple UUID validation via an ActiveModel::EachValidator. Uuid is\nnot capitalised as ActiveModel&#39;s …\n"],["<<","ApiTools::Communicators::Pool::QueueWithTimeout","classes/ApiTools/Communicators/Pool/QueueWithTimeout.html#method-i-3C-3C","( entry )","<p>Push a new entry to the end of the queue.\n<p><code>entry</code> &mdash; Entry to put onto the end of the queue.\n\n"],["actions","ApiTools::ServiceInterface","classes/ApiTools/ServiceInterface.html#method-i-actions","( *supported_actions )","<p>List the actions that the service implementation supports. If you don&#39;t\ncall this, the middleware …\n"],["add","ApiTools::Communicators::Pool","classes/ApiTools/Communicators/Pool.html#method-i-add","( communicator )","<p>Add a communicator instance to the pool. Future calls to #communicate will\ncall the same-named method …\n"],["add","ApiTools::Logger","classes/ApiTools/Logger.html#method-i-add","( *writer_instances )","<p>Add a new writer instance to this logger. Example:\n\n<pre><code>file_writer   = ApiTools::Logger::FileWriter.new( &#39;output.log&#39; ...</code></pre>\n"],["add","ApiTools::ServiceMiddleware::ExceptionReporting","classes/ApiTools/ServiceMiddleware/ExceptionReporting.html#method-c-add","( klass )","<p>Add an exception reporter class to the set of reporters. See the\nApiTools::ServiceMiddleware::ExceptionReporting::BaseReporter …\n"],["add","ApiTools::ServiceMiddleware::ServiceRegistryDRbServer","classes/ApiTools/ServiceMiddleware/ServiceRegistryDRbServer.html#method-i-add","( resource, version, uri )","<p>Add an endpoint to the list.\n<p><code>resource</code> &mdash; Resource as a String or Symbol, e.g. “Product”\n<p><code>version</code> … &mdash; "],["add_error","ApiTools::Errors","classes/ApiTools/Errors.html#method-i-add_error","( code, options = nil )","<p>Add an error instance to this collection.\n<p><code>code</code> &mdash; Error code in full, e.g. +generic.invalid_state&#39;.\n<p><code>options</code> … &mdash; "],["add_error","ApiTools::ServiceResponse","classes/ApiTools/ServiceResponse.html#method-i-add_error","( code, options = nil )","<p>Add an error to the internal collection. Passes input parameters through to\nApiTools::Errors#add_error …\n"],["add_errors","ApiTools::ServiceResponse","classes/ApiTools/ServiceResponse.html#method-i-add_errors","( errors_object )","<p>Add errors from an ApiTools::Errors instance to this response&#39;s error\ncollection.\n<p><code>errors_object</code> &mdash; ApiTools::Errors …\n\n"],["add_header","ApiTools::ServiceResponse","classes/ApiTools/ServiceResponse.html#method-i-add_header","( name, value, overwrite = false )","<p>Add an HTTP header to the internal collection that will be used for the\nresponse. Trying to set data …\n"],["add_precompiled_error","ApiTools::Errors","classes/ApiTools/Errors.html#method-i-add_precompiled_error","( code, message, reference, http_status = 500 )","<p>Add a precompiled error to the error collection. Pass error code, error\nmessage and reference data directly. …\n"],["add_precompiled_error","ApiTools::ServiceResponse","classes/ApiTools/ServiceResponse.html#method-i-add_precompiled_error","( code, message, reference, http_status = 500 )","<p>Add a precompiled error to the error collection. Pass error code, error\nmessage and reference data directly. …\n"],["adds_errors_to?","ApiTools::ActiveRecord::ErrorMapping","classes/ApiTools/ActiveRecord/ErrorMapping.html#method-i-adds_errors_to-3F","( collection, validate = true )","<p>Validates the model instance and adds mapped-to-platform errors to a given\nApiTools::Errors instance, …\n"],["adds_errors_to?","ApiTools::ServiceMiddleware::ServiceEndpoint::AugmentedBase","classes/ApiTools/ServiceMiddleware/ServiceEndpoint/AugmentedBase.html#method-i-adds_errors_to-3F","( collection )","<p>Adds errors set via #set_platform_errors to the given ApiTools::Errors\ninstance. Generally, #set_platform_errors …\n"],["array","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-array","( name, options = {}, &block )","<p>Define a JSON array with the supplied name and options. If there is a block\nprovided, then more DSL calls …\n"],["boolean","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-boolean","(name, options = {})","<p>Define a JSON boolean with the supplied name and options Params\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of options, …\n"],["call","ApiTools::ServiceApplication","classes/ApiTools/ServiceApplication.html#method-i-call","( env )","<p>Since service implementations are not pure Rack apps but really service\nmiddleware clients, they shouldn&#39;t …\n"],["call","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-i-call","( env )","<p>Run a Rack request, returning the [status, headers, body-array] data as per\nthe Rack protocol requirements. …\n"],["clear_errors","ApiTools::Errors","classes/ApiTools/Errors.html#method-i-clear_errors","()","<p>Clear (delete) all previously added errors (if any). After calling here,\n#has_errors? would always return …\n"],["communicate","ApiTools::Communicators::Fast","classes/ApiTools/Communicators/Fast.html#method-i-communicate","( object )","<p>Communicate quickly with the piece of external software for which your\nsubclass is designed. Subclasses …\n"],["communicate","ApiTools::Communicators::Pool","classes/ApiTools/Communicators/Pool.html#method-i-communicate","( object )","<p>Call the #communicate method on each communicator instance added via #add.\nEach instance is called in …\n"],["communicate","ApiTools::Communicators::Slow","classes/ApiTools/Communicators/Slow.html#method-i-communicate","( object )","<p>Communicate (possibly slowly) with the piece of external software for which\nyour subclass is designed. …\n"],["communicate","ApiTools::Logger::Communicator","classes/ApiTools/Logger/Communicator.html#method-i-communicate","( payload )","<p>Implement ApiTools::Communicators::Base#communicate for both slow and fast\nwriters. Assumes it will be …\n"],["communicate","ApiTools::ServiceMiddleware::ExceptionReporting::BaseReporter","classes/ApiTools/ServiceMiddleware/ExceptionReporting/BaseReporter.html#method-i-communicate","( object )","<p>Subclasses <strong>MUST</strong> <strong>NOT</strong> override this method,\nwhich is part of the base class implementation and implements …\n"],["component_interfaces","ApiTools::ServiceApplication","classes/ApiTools/ServiceApplication.html#method-i-component_interfaces","()","<p>Instance method which calls through to ::component_interfaces and returns\nits result.\n"],["component_interfaces","ApiTools::ServiceApplication","classes/ApiTools/ServiceApplication.html#method-c-component_interfaces","()","<p>Return an array of the classes that make up the interfaces for this\nservice. Each is an ApiTools::ServiceInterface …\n"],["comprised_of","ApiTools::ServiceApplication","classes/ApiTools/ServiceApplication.html#method-c-comprised_of","( *classes )","<p>Called by subclasses listing one or more ApiTools::ServiceInterface\nsubclasses that make up the service …\n"],["create","ApiTools::ServiceImplementation","classes/ApiTools/ServiceImplementation.html#method-i-create","( context )","<p>Implement a “create” action (store one new resource instance).\n<p><code>context</code> &mdash; ApiTools::ServiceContext …\n\n"],["create","ApiTools::ServiceMiddleware::ServiceEndpoint","classes/ApiTools/ServiceMiddleware/ServiceEndpoint.html#method-i-create","( body_hash, query_hash = nil )","<p>Create a resource instance.\n<p><code>body_hash</code> &mdash; See #initialize.\n<p><code>query_hash</code> &mdash; See #initialize.\n"],["date","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-date","(name, options = {})","<p>Define a JSON date with the supplied name and options Params\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of options, …\n"],["datetime","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-datetime","(name, options = {})","<p>Define a JSON datetime with the supplied name and options Params\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of options, …\n"],["debug","ApiTools::Logger","classes/ApiTools/Logger.html#method-i-debug","( *args )","<p>Write a <code>debug</code> log message, provided the log level is\n<code>:debug</code>.\n<p>The logging data is unstructured, but gets …\n"],["decimal","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-decimal","(name, options = {})","<p>Define a JSON decimal with the supplied name and options Params\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of options, …\n"],["default","ApiTools::ServiceInterface::ToListDSL","classes/ApiTools/ServiceInterface/ToListDSL.html#method-i-default","( sort_key )","<p>Used in conjunction with #sort. Specifies that a sort key should be the\ndefault sort order for the interface. …\n"],["default_sort_direction","ApiTools::ServiceInterface::ToList","classes/ApiTools/ServiceInterface/ToList.html#method-i-default_sort_direction","()","<p>Default sort direction.\n"],["delete","ApiTools::ServiceImplementation","classes/ApiTools/ServiceImplementation.html#method-i-delete","( context )","<p>Implement a “delete” action (delete one existing resource instance).\n<p><code>context</code> &mdash; ApiTools::ServiceContext …\n\n"],["delete","ApiTools::ServiceMiddleware::ServiceEndpoint","classes/ApiTools/ServiceMiddleware/ServiceEndpoint.html#method-i-delete","( ident, query_hash = nil )","<p>Delete a resource instance.\n<p><code>ident</code> &mdash; See #initialize.\n<p><code>query_hash</code> &mdash; See #initialize.\n"],["describe","ApiTools::ErrorDescriptions","classes/ApiTools/ErrorDescriptions.html#method-i-describe","( code )","<p>Return the options description hash, as passed to <code>error</code> calls\nin the block given to #errors_for, for …\n"],["deserialize","ApiTools::ServiceMiddleware::AMQPLogMessage","classes/ApiTools/ServiceMiddleware/AMQPLogMessage.html#method-i-deserialize","()","<p>Unpack a serialized representation into this instance. See the AMQEndpoint\ngem and AMQEndpoint::Message#deserialize …\n"],["dropped","ApiTools::Communicators::Slow","classes/ApiTools/Communicators/Slow.html#method-i-dropped","( count )","<p>This method is called <em>before</em> #communicate if messages have been\ndropped prior to the one which #communicate …\n"],["dropped","ApiTools::Logger::Communicator","classes/ApiTools/Logger/Communicator.html#method-i-dropped","( number )","<p>Implement optional method ApiTools::Communicators::Slow#dropped on behalf\nof subclasses. The method turns …\n"],["dropped?","ApiTools::Communicators::Pool::QueueEntry","classes/ApiTools/Communicators/Pool/QueueEntry.html#method-i-dropped-3F","()","<p>Returns <code>true</code> if this queue entry represents a dropped message\ncount (see #dropped), else +false (see …\n"],["embeds","ApiTools::ServiceInterface","classes/ApiTools/ServiceInterface.html#method-i-embeds","( *embeds )","<p>An array of supported embed keys (as per documentation, so singular or\nplural as per resource interface …\n"],["endpoint","ApiTools::ServiceInterface","classes/ApiTools/ServiceInterface.html#method-i-endpoint","( uri_path_fragment, implementation_class )","<p>Mandatory part of the interface DSL. Declare the interface&#39;s URL\nendpoint and the ApiTools::ServiceImplementation …\n"],["enum","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-enum","(name, options = {})","<p>Define a JSON string which can only have a restricted set of exactly\nmatched values, with the supplied …\n"],["environment","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-c-environment","()","<p>Utility - returns the execution environment as a Rails-like environment\nobject which answers queries …\n"],["error","ApiTools::ErrorDescriptions::DomainDescriptions","classes/ApiTools/ErrorDescriptions/DomainDescriptions.html#method-i-error","( name, options )","<p>Describe an error.\n<p><code>name</code> &mdash; The error name - the bit after the “<code>.</code>” in the code, e.g.\n<code>invalid_parameters</code> …\n"],["error","ApiTools::Logger","classes/ApiTools/Logger.html#method-i-error","( *args )","<p>Write an <code>error</code> log message, regardless of logging level.\n<p>The logging data is unstructured, but gets passed …\n"],["errors_for","ApiTools::ErrorDescriptions","classes/ApiTools/ErrorDescriptions.html#method-i-errors_for","( domain, &block )","<p>Implement the collection&#39;s part of the small DSL used for error\ndeclaration. Call here, passing the …\n"],["errors_for","ApiTools::ServiceInterface","classes/ApiTools/ServiceInterface.html#method-i-errors_for","( domain, &block )","<p>Declares custom errors that are part of this defined interface. This calls\ndirectly through to ApiTools::ErrorDescriptions#errors_for …\n"],["filter","ApiTools::ServiceInterface::ToListDSL","classes/ApiTools/ServiceInterface/ToListDSL.html#method-i-filter","( *filter )","<p>As #search, but for filtering.\n<p><code>filter</code> &mdash; Array of permitted filter keys, as symbols or strings. The order …\n\n"],["find","ApiTools::ServiceMiddleware::ServiceRegistryDRbServer","classes/ApiTools/ServiceMiddleware/ServiceRegistryDRbServer.html#method-i-find","( resource, version )","<p>Find an endpoint in the list. Returns URI at which the service may be\naccessed as a String, or &#39;nil&#39; …\n"],["flatten","ApiTools::Logger::FlattenerMixin","classes/ApiTools/Logger/FlattenerMixin.html#method-i-flatten","( log_level, component, code, data )","<p>Take the parameters from ApiTools::Logger::WriterMixin#report and return a\nsingle line string representing …\n"],["float","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-float","(name, options = {})","<p>Define a JSON float with the supplied name and options Params\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of options, …\n"],["for_rack","ApiTools::ServiceResponse","classes/ApiTools/ServiceResponse.html#method-i-for_rack","()","<p>Convert the internal response data into something that Rack expects. The\nreturn value of this method …\n"],["full_path","ApiTools::Presenters::Field","classes/ApiTools/Presenters/Field.html#method-i-full_path","(path)","<p>Return the full path and name of this field\n<p><code>path</code> &mdash; The JSON path or nil, e.g. &#39;one.two&#39;\n\n"],["generate","ApiTools::UUID","classes/ApiTools/UUID.html#method-c-generate","()","<p>Generate a unique identifier. Returns a 32 character string.\n"],["get_header","ApiTools::ServiceResponse","classes/ApiTools/ServiceResponse.html#method-i-get_header","( name )","<p>Check the stored value of a given HTTP header. Checks are case insensitive.\nReturns the value stored …\n"],["get_schema","ApiTools::Presenters::Base","classes/ApiTools/Presenters/Base.html#method-c-get_schema","()","<p>Return the schema graph. See also ::get_schema_definition.\n"],["get_schema_definition","ApiTools::Presenters::Base","classes/ApiTools/Presenters/Base.html#method-c-get_schema_definition","()","<p>Read back the block that defined the schema graph. See also ::get_schema.\n"],["halt_processing?","ApiTools::ServiceResponse","classes/ApiTools/ServiceResponse.html#method-i-halt_processing-3F","()","<p>Returns <code>true</code> if processing should halt, e.g. because errors\nhave been added to the errors collection. …\n"],["has_all_roles?","ApiTools::ServiceSession","classes/ApiTools/ServiceSession.html#method-i-has_all_roles-3F","(roles)","<p>Returns true if this session has all specified roles\n"],["has_any_roles?","ApiTools::ServiceSession","classes/ApiTools/ServiceSession.html#method-i-has_any_roles-3F","(roles)","<p>Returns true if this session has any of the specified roles\n"],["has_default?","ApiTools::Presenters::Field","classes/ApiTools/Presenters/Field.html#method-i-has_default-3F","()","<p>Does this property have a defined default (which may be defined as\n<code>nil</code>) rather than having no defined …\n"],["has_errors?","ApiTools::Errors","classes/ApiTools/Errors.html#method-i-has_errors-3F","()","<p>Does this instance have any errors added? Returns <code>true</code> if so,\nelse <code>false</code>.\n"],["has_memcache?","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-c-has_memcache-3F","()","<p>Do we have Memcache available? If not, assume local development with higher\nlevel queue services not …\n"],["has_role?","ApiTools::ServiceSession","classes/ApiTools/ServiceSession.html#method-i-has_role-3F","(role)","<p>Returns true if this session has the specified role\n"],["hash","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-hash","( name, options = {}, &block )","<p>Define a JSON object with the supplied name and optional constraints on\nproperties (like hash keys) and …\n"],["headers","ApiTools::ServiceResponse","classes/ApiTools/ServiceResponse.html#method-i-headers","()","<p>Returns the list previously set headers in a name: value Hash.\n"],["included","ApiTools::ActiveRecord::Finder","classes/ApiTools/ActiveRecord/Finder.html#method-c-included","( model )","<p>Instantiates this module when it is included:\n<p>Example:\n\n<pre><code>class SomeModel &lt; ActiveRecord::Base\n  include ApiTools::ActiveRecord::Finder ...</code></pre>\n"],["included","ApiTools::ActiveRecord::UUID","classes/ApiTools/ActiveRecord/UUID.html#method-c-included","( model )","<p>Instantiates this module when it is included:\n<p>Example:\n\n<pre><code>class SomeModel &lt; ActiveRecord::Base\n  include ApiTools::ActiveRecord::UUID ...</code></pre>\n"],["info","ApiTools::Logger","classes/ApiTools/Logger.html#method-i-info","( *args )","<p>Write an <code>info</code> log message, provided the log level is\n<code>:debug</code> or <code>:info</code>.\n<p>The logging data is unstructured, …\n"],["inherited","ApiTools::ActiveRecord::Base","classes/ApiTools/ActiveRecord/Base.html#method-c-inherited","( model )","<p>Instantiates all the ActiveRecord mixins when this class is inherited.\n"],["instances","ApiTools::Logger","classes/ApiTools/Logger.html#method-i-instances","()","<p>Returns an array of all log writer instances currently in use, in order of\naddition. See #add.\n"],["instantiate","ApiTools::ActiveRecord::Finder","classes/ApiTools/ActiveRecord/Finder.html#method-c-instantiate","( model )","<p>When instantiated in an ActiveRecord::Base subclass, all of the\nApiTools::ActiveRecord::Finder::ClassMethods …\n"],["instantiate","ApiTools::ActiveRecord::UUID","classes/ApiTools/ActiveRecord/UUID.html#method-c-instantiate","( model )","<p>When called, this method:\n<p>Declares &#39;id&#39; as the primary key\n<p>Self-assigns a UUID to &#39;id&#39; …\n"],["integer","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-integer","(name, options = {})","<p>Define a JSON integer with the supplied name and options Params\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of options, …\n"],["inter_resource","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-i-inter_resource","( options )","<p>Perform an inter-resource call. This shouldn&#39;t be called directly; call\nvia the ApiTools::ServiceMiddleware::ServiceEndpoint …\n"],["inter_resource_local","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-i-inter_resource_local","( options )","<p>Make a local (non-HTTP local Ruby method call) inter-resource call. Fast.\n<p><code>options</code> &mdash; See #inter_resource …\n"],["inter_resource_remote","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-i-inter_resource_remote","( options )","<p>Make a remote (HTTP) inter-resource call. Slow.\n<p><code>options</code> &mdash; See #inter_resource.\n<p>Returns &mdash; See #inter_resource …\n"],["interface","ApiTools::ServiceInterface","classes/ApiTools/ServiceInterface.html#method-c-interface","( resource, &block )","<p>Define the subclass service&#39;s interface. A DSL is used with methods\ndocumented in the ApiTools::ServiceInterfaceDSL …\n"],["interface","ApiTools::ServiceMiddleware::ServiceEndpoint","classes/ApiTools/ServiceMiddleware/ServiceEndpoint.html#method-i-interface","()","<p>Find out the service interface class being used by this instance. If\n<code>nil</code>, the interface is remote - it …\n"],["internationalised","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-internationalised","( options = nil )","<p>Declares that this Type or Resource contains fields which will may carry\nhuman-readable data subject …\n"],["is_internationalised?","ApiTools::Presenters::Base","classes/ApiTools/Presenters/Base.html#method-c-is_internationalised-3F","()","<p>Does this presenter use internationalisation? Returns <code>true</code> if\nso, else <code>false</code>.\n"],["is_internationalised?","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-is_internationalised-3F","()","<p>An enquiry method related to, but not part of the DSL; returns\n<code>true</code> if the schema instance is internationalised, …\n"],["key","ApiTools::Presenters::Hash","classes/ApiTools/Presenters/Hash.html#method-i-key","(name, options = {}, &block)","<p>Hash DSL: Define a specific named key that is allowed (or even required) in\nthe hash. The optional block …\n"],["keys","ApiTools::Presenters::Hash","classes/ApiTools/Presenters/Hash.html#method-i-keys","( options = {}, &block )","<p>Hash DSL: Define general parameters allowed for keys in a Hash and, if a\nblock is given, use ApiTools::Presenters::BaseDSL …\n"],["limit","ApiTools::ServiceInterface::ToListDSL","classes/ApiTools/ServiceInterface/ToListDSL.html#method-i-limit","( limit )","<p>Specify the page size (limit) for lists.\n<p><code>limit</code> &mdash; Page size (integer).\n\n<p>Example:\n"],["list","ApiTools::ServiceImplementation","classes/ApiTools/ServiceImplementation.html#method-i-list","( context )","<p>Implement a “list” action (paginated, sorted list of resources).\n<p><code>context</code> &mdash; ApiTools::ServiceContext …\n\n"],["list","ApiTools::ServiceMiddleware::ServiceEndpoint","classes/ApiTools/ServiceMiddleware/ServiceEndpoint.html#method-i-list","( query_hash = nil )","<p>Obtain a list of resource instance representations.\n<p><code>query_hash</code> &mdash; See #initialize. This is the only way to …\n\n"],["list_filter_map","ApiTools::ActiveRecord::Finder::ClassMethods","classes/ApiTools/ActiveRecord/Finder/ClassMethods.html#method-i-list_filter_map","( map )","<p>As #list_search_map, but used in <code>where.not</code> queries.\n<p><code>map</code> &mdash; As #list_search_map.\n\n"],["list_finder","ApiTools::ActiveRecord::Finder::ClassMethods","classes/ApiTools/ActiveRecord/Finder/ClassMethods.html#method-i-list_finder","( list_parameters )","<p>Generate an ActiveRecord::Relation instance which can be used to count,\nretrieve or further refine a …\n"],["list_search_map","ApiTools::ActiveRecord::Finder::ClassMethods","classes/ApiTools/ActiveRecord/Finder/ClassMethods.html#method-i-list_search_map","( map )","<p>Specify a search mapping for use by #list_finder to automatically restrict\nlist results.\n<p>Simple example …\n"],["load_session","ApiTools::ServiceSession","classes/ApiTools/ServiceSession.html#method-c-load_session","( memcache_url, session_id )","<p>TODO: Loyalty NZ derived, needs better specification.\n<p>Create a ServiceSession instance by loading session …\n"],["local_service_for","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-i-local_service_for","( resource, version = 1 )","<p>Is the given resource available as a local endpoint in this service\napplication?\n<p><code>resource</code> &mdash; Resource name …\n"],["logger","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-c-logger","()","<p>Access the middleware&#39;s logging instance. Call <code>report</code> on\nthis to make structured log entries. See …\n"],["merge!","ApiTools::Errors","classes/ApiTools/Errors.html#method-i-merge-21","( source )","<p>Merge the contents of a source error object with this one, adding its\nerrors to this collection. No checks …\n"],["new","ApiTools::Communicators::Pool","classes/ApiTools/Communicators/Pool.html#method-c-new","()","<p>Create a new pool of communicators - instances of subclasses of\nApiTools::Communicators::Fast or ApiTools::Communicators::Slow …\n"],["new","ApiTools::Communicators::Pool::QueueEntry","classes/ApiTools/Communicators/Pool/QueueEntry.html#method-c-new","( payload: nil, dropped: nil, terminate: false, sync: false )","<p>Create a new instance, ready to be added to the Queue.\n<p><strong>ONLY</strong> <strong>USE</strong> <strong>ONE</strong> of the\nnamed parameters:\n<p><code>payload</code> &mdash; A …\n"],["new","ApiTools::Communicators::Pool::QueueWithTimeout","classes/ApiTools/Communicators/Pool/QueueWithTimeout.html#method-c-new","()","<p>Create a new instance.\n"],["new","ApiTools::ErrorDescriptions","classes/ApiTools/ErrorDescriptions.html#method-c-new","( domain = nil, &block )","<p>Create an instance, self-declaring <code>platform</code> and\n<code>generic</code> domain errors. You can optionally call the constructor\n…\n"],["new","ApiTools::ErrorDescriptions::DomainDescriptions","classes/ApiTools/ErrorDescriptions/DomainDescriptions.html#method-c-new","( domain )","<p>Initialize a new instance for the given domain.\n<p><code>domain</code> &mdash; The domain string - for most service-based callers, …\n\n"],["new","ApiTools::Errors","classes/ApiTools/Errors.html#method-c-new","( descriptions = DEFAULT_ERROR_DESCRIPTIONS )","<p>Create an instance.\n<p><code>descriptions</code> &mdash; (Optional) ApiTools::ErrorDescriptions instance with\nservice-domain-specific …\n\n"],["new","ApiTools::Logger","classes/ApiTools/Logger.html#method-c-new","( component = :Middleware )","<p>Create a new logger instance. Once created, use #add to add writers.\n<p><code>component</code> &mdash; Flat logging methods (see …\n\n"],["new","ApiTools::Logger::Communicator","classes/ApiTools/Logger/Communicator.html#method-c-new","( writer_instance, owning_logger )",""],["new","ApiTools::Logger::FileWriter","classes/ApiTools/Logger/FileWriter.html#method-c-new","( pathname )","<p>Create a file writer instance. Files are written by opening, adding a log\nmessage and closing again, …\n"],["new","ApiTools::Logger::LogEntriesDotComWriter","classes/ApiTools/Logger/LogEntriesDotComWriter.html#method-c-new","( token )","<p>Create a log writer instance.\n<p><code>token</code> &mdash; Your logentries.com API token.\n\n"],["new","ApiTools::Logger::Payload","classes/ApiTools/Logger/Payload.html#method-c-new","( log_level:, component:, code:, data: )","<p>Create an instance. Named parameters are:\n<p><code>log_level</code> &mdash; See ApiTools::Logger#report.\n<p><code>component</code> &mdash; See ApiTools::Logger#report …\n"],["new","ApiTools::Logger::StreamWriter","classes/ApiTools/Logger/StreamWriter.html#method-c-new","( output_stream = $stdout )","<p>Create a stream writer instance. Although you could initialize this class\nwith a slow output stream, …\n"],["new","ApiTools::Presenters::Decimal","classes/ApiTools/Presenters/Decimal.html#method-c-new","(name, options = {})","<p>Initialize a Decimal instance with the appropriate name and options\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of …\n"],["new","ApiTools::Presenters::Enum","classes/ApiTools/Presenters/Enum.html#method-c-new","(name, options = {})","<p>Initialize a String instance with the appropriate name and options\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of …\n"],["new","ApiTools::Presenters::Field","classes/ApiTools/Presenters/Field.html#method-c-new","(name, options = {})","<p>Initialize a Field instance with the appropriate name and options\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of options, …\n"],["new","ApiTools::Presenters::Object","classes/ApiTools/Presenters/Object.html#method-c-new","(name = nil, options = {})","<p>Initialize an Object instance with the appropriate name and options\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of …\n"],["new","ApiTools::Presenters::String","classes/ApiTools/Presenters/String.html#method-c-new","(name, options = {})","<p>Initialize a String instance with the appropriate name and options\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of …\n"],["new","ApiTools::Presenters::UUID","classes/ApiTools/Presenters/UUID.html#method-c-new","(name, options = {})","<p>Initialize a UUID instance with the appropriate name and options\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of options, …\n"],["new","ApiTools::ServiceContext","classes/ApiTools/ServiceContext.html#method-c-new","( session, request, response, middleware )","<p>Create a new instance.\n<p><code>session</code> &mdash; See #session.\n<p><code>request</code> &mdash; See #request.\n"],["new","ApiTools::ServiceInterface::ToList","classes/ApiTools/ServiceInterface/ToList.html#method-c-new","()","<p>Create an instance with default settings.\n"],["new","ApiTools::ServiceInterface::ToListDSL","classes/ApiTools/ServiceInterface/ToListDSL.html#method-c-new","( api_tools_service_interface_to_list_instance, &block )","<p>Initialize an instance and run the DSL methods.\n<p><code>api_tools_service_interface_to_list_instance</code> &mdash; Instance …\n"],["new","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-c-new","( app )","<p>Initialize the middleware instance.\n<p><code>app</code> Rack app instance to which calls should be passed.\n"],["new","ApiTools::ServiceMiddleware::AMQPLogMessage","classes/ApiTools/ServiceMiddleware/AMQPLogMessage.html#method-c-new","(options = {})","<p>Create an instance with options keyed on the attributes defined for the\nclass.\n"],["new","ApiTools::ServiceMiddleware::AMQPLogWriter","classes/ApiTools/ServiceMiddleware/AMQPLogWriter.html#method-c-new","( alchemy, queue_name = nil )","<p>Create an AMQP logger instance.\n<p><code>alchemy</code> &mdash; The Alchemy endpoint to use for sending messages to the AMQP-based …\n"],["new","ApiTools::ServiceMiddleware::ExceptionReporting::Payload","classes/ApiTools/ServiceMiddleware/ExceptionReporting/Payload.html#method-c-new","( exception:, rack_env: nil )","<p>Initialize this instance with named parameters:\n<p><code>exception</code> &mdash; Exception (or Exception subclass) instance. …\n"],["new","ApiTools::ServiceMiddleware::ServiceEndpoint","classes/ApiTools/ServiceMiddleware/ServiceEndpoint.html#method-c-new","( middleware_instance, resource, version = 1 )","<p>Create an endpoint instance on behalf of the given\nApiTools::ServiceMiddleware instance, directed at …\n"],["new","ApiTools::ServiceMiddleware::ServiceRegistryDRbServer","classes/ApiTools/ServiceMiddleware/ServiceRegistryDRbServer.html#method-c-new","()","<p>Create an instance ready for use as a DRb “front object”.\n"],["new","ApiTools::ServiceRequest","classes/ApiTools/ServiceRequest.html#method-c-new","()","<p>Set up defaults in this instance.\n"],["new","ApiTools::ServiceRequest::ListParameters","classes/ApiTools/ServiceRequest/ListParameters.html#method-c-new","()","<p>Set up defaults in this instance.\n"],["new","ApiTools::ServiceResponse","classes/ApiTools/ServiceResponse.html#method-c-new","()","<p>Create a new instance, ready to take on a response. The service middleware\nis responsible for doing this. …\n"],["new","ApiTools::ServiceSession","classes/ApiTools/ServiceSession.html#method-c-new","(options = {})","<p>Instantiate a new ServiceSession instance with the optional supplied\nparameters.\n<p><code>options</code> &mdash; Optional hash …\n\n"],["not_found","ApiTools::ServiceResponse","classes/ApiTools/ServiceResponse.html#method-i-not_found","( ident )","<p>Set the standard not found error message (generic.not_found), to be used\ndurning a &#39;show&#39; call …\n"],["object","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-object","( name, options = {}, &block )","<p>Define a JSON object with the supplied name and options.\n<p><code>name</code> &mdash; The JSON key.\n<p><code>options</code> &mdash; Optional <code>Hash</code> of options, …\n"],["on_queue?","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-c-on_queue-3F","()","<p>Are we running on the queue, else (implied) a local HTTP server?\n"],["ping","ApiTools::ServiceMiddleware::ServiceRegistryDRbServer","classes/ApiTools/ServiceMiddleware/ServiceRegistryDRbServer.html#method-i-ping","()","<p>Check to see if this DRb service is awake. Returns <code>true</code>.\n"],["platform_errors","ApiTools::ActiveRecord::ErrorMapping","classes/ApiTools/ActiveRecord/ErrorMapping.html#method-i-platform_errors","( validate = true )","<p>Validate the model instance and return an ApiTools::Errors instance which\ncontains no platform errors …\n"],["platform_errors","ApiTools::ServiceMiddleware::ServiceEndpoint::AugmentedBase","classes/ApiTools/ServiceMiddleware/ServiceEndpoint/AugmentedBase.html#method-i-platform_errors","()","<p>Returns an ApiTools::Errors instance that&#39;s either been assigned via\n#set_platform_errors or is an …\n"],["polymorphic_find","ApiTools::ActiveRecord::Finder::ClassMethods","classes/ApiTools/ActiveRecord/Finder/ClassMethods.html#method-i-polymorphic_find","( finder, ident )","<p>“Polymorphic” find - support for finding a model by fields other than just\n<code>:id</code>, based on a …\n"],["polymorphic_id_fields","ApiTools::ActiveRecord::Finder::ClassMethods","classes/ApiTools/ActiveRecord/Finder/ClassMethods.html#method-i-polymorphic_id_fields","( *args )","<p>Specify the fields (attributes / columns) upon which #polymorphic_find will\nperform its search. <code>:id</code> is …\n"],["public_actions","ApiTools::ServiceInterface","classes/ApiTools/ServiceInterface.html#method-i-public_actions","( *public_actions )","<p>List any actions which are public - NOT PROTECTED BY SESSIONS. For public\nactions, no X-Session-ID or …\n"],["racks_original_start","Rack::Server","classes/Rack/Server.html#method-c-racks_original_start","( options = nil )",""],["read_at_path","ApiTools::Presenters::Field","classes/ApiTools/Presenters/Field.html#method-i-read_at_path","( from_target, with_path )","<p>Dive down into a given target data hash using the given array of path keys,\nreturning the result at the …\n"],["recognised?","ApiTools::ErrorDescriptions","classes/ApiTools/ErrorDescriptions.html#method-i-recognised-3F","( code )","<p>Is the given error code recognised? Returns <code>true</code> if so, else\n<code>false</code>.\n<p><code>code</code> &mdash; Error code in full, e.g. +generic.invalid_state&#39;. …\n\n"],["record_host_and_port","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-c-record_host_and_port","( options = {} )","<p>Record internally the HTTP host and port during local development via e.g\n<code>rackup</code> or testing with rspec. …\n"],["remote_service_for","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-i-remote_service_for","( resource, version = 1 )","<p>Is the given resource available as a remote endpoint we can target via\nHTTP?\n<p><code>resource</code> &mdash; Resource name of …\n"],["remove","ApiTools::Communicators::Pool","classes/ApiTools/Communicators/Pool.html#method-i-remove","( communicator )","<p>Remove a communicator previously added by #add. See that for details.\n<p>It is harmless to try and remove …\n"],["remove","ApiTools::Logger","classes/ApiTools/Logger.html#method-i-remove","( writer_instance )","<p>Remove a writer instance from this logger. If the instance has not been\npreviously added, no error is …\n"],["remove","ApiTools::ServiceMiddleware::ExceptionReporting","classes/ApiTools/ServiceMiddleware/ExceptionReporting.html#method-c-remove","( klass )","<p>Remove an exception reporter class from the set of reporters. See ::add for\ndetails.\n<p><code>klass</code> &mdash; ApiTools::ServiceMiddleware::ExceptionReporting::BaseReporter …\n\n"],["remove_all","ApiTools::Logger","classes/ApiTools/Logger.html#method-i-remove_all","()","<p>Remove all writer instances from this logger.\n<p>Slow writers may take a while to finish processing and shut …\n"],["rename","ApiTools::Presenters::Field","classes/ApiTools/Presenters/Field.html#method-i-rename","( name )","<p>Rename a property to the given name. The internal name is changed and the\nlast path entry set to the …\n"],["render","ApiTools::Errors","classes/ApiTools/Errors.html#method-i-render","()","<p>Return a Hash rendered through the ApiTools::Data::Resources::Errors\ncollection representing the formalised …\n"],["render","ApiTools::Presenters::Array","classes/ApiTools/Presenters/Array.html#method-i-render","(data, target)","<p>Render an array into the target hash based on the internal state that\ndescribes this instance&#39;s current …\n"],["render","ApiTools::Presenters::Base","classes/ApiTools/Presenters/Base.html#method-c-render","( data, uuid = nil, created_at = nil, language = 'en-nz' )","<p>Given some data that should conform to the subclass presenter&#39;s schema,\nrender it to go from the …\n"],["render","ApiTools::Presenters::Field","classes/ApiTools/Presenters/Field.html#method-i-render","(data, target)","<p>Dive down into a given hash along path array +@path+, building new hash\nentries if necessary at each …\n"],["render","ApiTools::Presenters::Hash","classes/ApiTools/Presenters/Hash.html#method-i-render","(data, target)","<p>Render a hash into the target hash based on the internal state that\ndescribes this instance&#39;s current …\n"],["render","ApiTools::Presenters::Object","classes/ApiTools/Presenters/Object.html#method-i-render","( data, target )","<p>Render inbound data into a target hash according to the schema, applying\ndefaults where defined for fields …\n"],["report","ApiTools::Logger","classes/ApiTools/Logger.html#method-i-report","( log_level, component, code, data )","<p>Logs a message using the structured logger. Whether or not log data is\nwritten in a stuctured manner …\n"],["report","ApiTools::Logger::FileWriter","classes/ApiTools/Logger/FileWriter.html#method-i-report","( log_level, component, code, data )","<p>See ApiTools::Logger::WriterMixin#report.\n"],["report","ApiTools::Logger::LogEntriesDotComWriter","classes/ApiTools/Logger/LogEntriesDotComWriter.html#method-i-report","( log_level, component, code, data )","<p>See ApiTools::Logger::WriterMixin#report.\n"],["report","ApiTools::Logger::StreamWriter","classes/ApiTools/Logger/StreamWriter.html#method-i-report","( log_level, component, code, data )","<p>See ApiTools::Logger::WriterMixin#report.\n"],["report","ApiTools::Logger::WriterMixin","classes/ApiTools/Logger/WriterMixin.html#method-i-report","( log_level, component, code, data )","<p>ApiTools::Logger::FastWriter and ApiTools::Logger::SlowWriter subclasses\nimplement this method.\n<p>Write …\n"],["report","ApiTools::ServiceMiddleware::AMQPLogWriter","classes/ApiTools/ServiceMiddleware/AMQPLogWriter.html#method-i-report","( level, component, code, data )","<p>Custom implementation of the ApiTools::Logger::WriterMixin#report\ninterface. See that method for parameter …\n"],["report","ApiTools::ServiceMiddleware::ExceptionReporting","classes/ApiTools/ServiceMiddleware/ExceptionReporting.html#method-c-report","( exception, rack_env = nil )","<p>Call all added exception reporters (see ::add) to report an exception.\n<p><code>exception</code> &mdash; Exception or Exception …\n"],["report","ApiTools::ServiceMiddleware::ExceptionReporting::AirbrakeReporter","classes/ApiTools/ServiceMiddleware/ExceptionReporting/AirbrakeReporter.html#method-i-report","( e, env = nil )","<p>Report an exception to Airbrake.\n<p><code>e</code> &mdash; Exception (or subclass) instance to be reported.\n<p><code>env</code> &mdash; Optional Rack environment …\n"],["report","ApiTools::ServiceMiddleware::ExceptionReporting::BaseReporter","classes/ApiTools/ServiceMiddleware/ExceptionReporting/BaseReporter.html#method-i-report","( e, env = nil )","<p>Subclasses implement this method. The middleware creates the singleton\ninstance of the subclass, then …\n"],["report","ApiTools::ServiceMiddleware::ExceptionReporting::RaygunReporter","classes/ApiTools/ServiceMiddleware/ExceptionReporting/RaygunReporter.html#method-i-report","( e, env = nil )","<p>Report an exception to Raygun.\n<p><code>e</code> &mdash; Exception (or subclass) instance to be reported.\n<p><code>env</code> &mdash; Optional Rack environment …\n"],["report?","ApiTools::Logger","classes/ApiTools/Logger.html#method-i-report-3F","( log_level )","<p>Given the log level configuration of this instance - see #level= and #level\n- should a message of the …\n"],["resource","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-resource","( resource_name, options = nil )","<p>Declare that a resource of a given name is included at this point. This is\nonly normally done within …\n"],["resource","ApiTools::ServiceContext","classes/ApiTools/ServiceContext.html#method-i-resource","( resource_name, version = 1 )","<p>Request (and lazy-initialize) a new resource endpoint instance for talking\nto a resource&#39;s interface. …\n"],["rewrite_path","ApiTools::Presenters::Field","classes/ApiTools/Presenters/Field.html#method-i-rewrite_path","( depth, name )","<p>Change the +@path+ array by writing a given value in at a given index. If\nthis property has any sub-properties, …\n"],["run!","ApiTools::Generator","classes/ApiTools/Generator.html#method-i-run-21","(args)",""],["schema","ApiTools::Presenters::Base","classes/ApiTools/Presenters/Base.html#method-c-schema","(&block)","<p>Define the JSON schema for validation.\n<p>&amp;block &mdash; Block that makes calls to the DSL defined in ApiTools::Presenters::BaseDSL\n…\n\n"],["search","ApiTools::ServiceInterface::ToListDSL","classes/ApiTools/ServiceInterface/ToListDSL.html#method-i-search","( *search )","<p>Specify supported search keys in an array. The middleware will make sure\nthe interface implementation …\n"],["serialize","ApiTools::ServiceMiddleware::AMQPLogMessage","classes/ApiTools/ServiceMiddleware/AMQPLogMessage.html#method-i-serialize","()","<p>Seralize this instance. See the AMQEndpoint gem and\nAMQEndpoint::Message#serialize.\n"],["set_log_folder","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-c-set_log_folder","( base_path )","<p>If using the middleware logger (see ::logger) with no external custom\nlogger set up (see ::set_logger …\n"],["set_logger","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-c-set_logger","( logger )","<p>The middleware sets up a logger itself (see ::logger) with various log\nmechanisms set up (mostly) without …\n"],["set_platform_errors","ApiTools::ServiceMiddleware::ServiceEndpoint::AugmentedBase","classes/ApiTools/ServiceMiddleware/ServiceEndpoint/AugmentedBase.html#method-i-set_platform_errors","( errors )","<p>Sets the ApiTools::Errors instance used by #adds_errors_to? or returned by\n#platform_errors.\n<p>It is expected …\n"],["shift","ApiTools::Communicators::Pool::QueueWithTimeout","classes/ApiTools/Communicators/Pool/QueueWithTimeout.html#method-i-shift","( timeout = nil )","<p>Take an entry from the front of the queue (FIFO) with optional timeout if\nthe queue is empty.\n<p><code>timeout</code> … &mdash; "],["show","ApiTools::ServiceImplementation","classes/ApiTools/ServiceImplementation.html#method-i-show","( context )","<p>Implement a “show” action (represent one existing resource instance).\n<p><code>context</code> &mdash; ApiTools::ServiceContext …\n\n"],["show","ApiTools::ServiceMiddleware::ServiceEndpoint","classes/ApiTools/ServiceMiddleware/ServiceEndpoint.html#method-i-show","( ident, query_hash = nil )","<p>Obtain a resource instance representation.\n<p><code>ident</code> &mdash; See #initialize.\n<p><code>query_hash</code> &mdash; See #initialize.\n"],["sort","ApiTools::ServiceInterface::ToListDSL","classes/ApiTools/ServiceInterface/ToListDSL.html#method-i-sort","( sort )","<p>Specify extra sort keys and orders that add with whatever platform common\ndefaults are already in place. …\n"],["spare_port","ApiTools::Utilities","classes/ApiTools/Utilities.html#method-c-spare_port","()","<p>Return a spare TCP port on localhost. This is free at the instant of\ncalling, though of course if you …\n"],["start","ApiTools::ServiceMiddleware::ServiceRegistryDRbServer","classes/ApiTools/ServiceMiddleware/ServiceRegistryDRbServer.html#method-c-start","()","<p>Start the DRb server. Does not return (joins the DRb thread). If the server\nis already running, expect …\n"],["start","Rack::Server","classes/Rack/Server.html#method-c-start","( options = nil )",""],["start_and_record_host_and_port","Rack::Server","classes/Rack/Server.html#method-c-start_and_record_host_and_port","( options = nil )",""],["stop","ApiTools::ServiceMiddleware::ServiceRegistryDRbServer","classes/ApiTools/ServiceMiddleware/ServiceRegistryDRbServer.html#method-i-stop","()","<p>Shut down this DRb service.\n"],["string","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-string","(name, options = {})","<p>Define a JSON string with the supplied name and options Params\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> &mdash; A <code>Hash</code> of options, …\n"],["stringify","ApiTools::Utilities","classes/ApiTools/Utilities.html#method-c-stringify","(obj)","<p>The keys-to-strings equivalent of ::symbolize.\n<p><code>obj</code> &mdash; Hash or Array of Hashes. Will recursively convert keys …\n\n"],["symbolize","ApiTools::Utilities","classes/ApiTools/Utilities.html#method-c-symbolize","(obj)","<p>Given a hash, returns the same hash with keys converted to symbols. Works\nwith nested hashes. Taken from: …\n"],["sync?","ApiTools::Communicators::Pool::QueueEntry","classes/ApiTools/Communicators/Pool/QueueEntry.html#method-i-sync-3F","()","<p>Returns <code>true</code> if this queue entry represents a request to push\na message onto the processing Thread&#39;s …\n"],["tags","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-tags","( field_name, options = nil )","<p>Declares that this Type or Resource has a string field of unlimited length\nthat contains comma-separated …\n"],["terminate","ApiTools::Communicators::Pool","classes/ApiTools/Communicators/Pool.html#method-i-terminate","( per_instance_timeout: THREAD_EXIT_TIMEOUT )","<p>The communication pool is “emptied” by this call, going back to a clean\nstate as if just initialised. …\n"],["terminate?","ApiTools::Communicators::Pool::QueueEntry","classes/ApiTools/Communicators/Pool/QueueEntry.html#method-i-terminate-3F","()","<p>Returns <code>true</code> if encountering this queue entry should terminate\nthe processing thread, else <code>false</code> (see …\n"],["testing","ApiTools::ServiceSession","classes/ApiTools/ServiceSession.html#method-c-testing","(test_mode, mock_session = nil)","<p>TODO: Loyalty NZ derived, needs better specification.\n<p>Set testing mode.\n<p><code>test_mode</code> &mdash; <code>true</code> to use a static …\n"],["text","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-text","(name, options = {})","<p>Define a JSON string of unlimited length with the supplied name and options\nParams\n<p><code>name</code> &mdash; The JSON key\n<p><code>options</code> … &mdash; "],["to_create","ApiTools::ServiceInterface","classes/ApiTools/ServiceInterface.html#method-i-to_create","( &block )","<p>Optional description of the JSON parameters (schema) that the\ninterface&#39;s implementation requires …\n"],["to_h","ApiTools::ServiceSession","classes/ApiTools/ServiceSession.html#method-i-to_h","()","<p>Returns a representation of the Session data as a Hash.\n<p>TODO: LoyaltyNZ specific - hash matches input …\n"],["to_integer?","ApiTools::Utilities","classes/ApiTools/Utilities.html#method-c-to_integer-3F","( value )","<p>Is a parameter convertable to an integer cleanly? Returns the integer value\nif so, else <code>nil</code>.\n<p><code>value</code> &mdash; Value …\n\n"],["to_list","ApiTools::ServiceInterface","classes/ApiTools/ServiceInterface.html#method-c-to_list","()","<p>An ApiTools::ServiceInterface::ToList instance describing the list\nparameters for the interface as a …\n"],["to_list","ApiTools::ServiceInterface","classes/ApiTools/ServiceInterface.html#method-i-to_list","( &block )","<p>Specify parameters related to common index parameters. The block contains\ncalls to the DSL described …\n"],["to_update","ApiTools::ServiceInterface","classes/ApiTools/ServiceInterface.html#method-i-to_update","( &block )","<p>As #to_create, but applies when modifying existing resource instances. To\navoid repeating yourself, if …\n"],["translate_errors_from_other_resource","ApiTools::ServiceMiddleware","classes/ApiTools/ServiceMiddleware.html#method-i-translate_errors_from_other_resource","( errors )","<p>Take an ApiTools::Errors instance constructed from, or obtained via a call\nto another service (inter-resource …\n"],["type","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-type","( type_name, options = nil )","<p>Declare that a nested type of a given name is included at this point. This\nis only normally done within …\n"],["unjoin_and_unescape_commas","ApiTools::Errors","classes/ApiTools/Errors.html#method-i-unjoin_and_unescape_commas","( str )","<p>When reference data is specified for errors, the reference values are\nconcatenated together into a comma-separated …\n"],["update","ApiTools::ServiceImplementation","classes/ApiTools/ServiceImplementation.html#method-i-update","( context )","<p>Implement a “update” action (modify one existing resource instance).\n<p><code>context</code> &mdash; ApiTools::ServiceContext …\n\n"],["update","ApiTools::ServiceMiddleware::AMQPLogMessage","classes/ApiTools/ServiceMiddleware/AMQPLogMessage.html#method-i-update","( options )","<p>Set public attribute values according to an options hash keyed on the\nattributes defined for the class. …\n"],["update","ApiTools::ServiceMiddleware::ServiceEndpoint","classes/ApiTools/ServiceMiddleware/ServiceEndpoint.html#method-i-update","( ident, body_hash, query_hash = nil )","<p>Update a resource instance.\n<p><code>ident</code> &mdash; See #initialize.\n<p><code>body_hash</code> &mdash; See #initialize.\n"],["update_same_as_create","ApiTools::ServiceInterface","classes/ApiTools/ServiceInterface.html#method-i-update_same_as_create","()","<p>Declares that the expected JSON fields described in a #to_create call are\nthe same as those required …\n"],["uri","ApiTools::ServiceMiddleware::ServiceRegistryDRbServer","classes/ApiTools/ServiceMiddleware/ServiceRegistryDRbServer.html#method-c-uri","()","<p>URI for DRb server used during local machine development as a registry of\nservice endpoints. Whichever …\n"],["uri_path_components=","ApiTools::ServiceRequest","classes/ApiTools/ServiceRequest.html#method-i-uri_path_components-3D","( ary )","<p>Set the array returned by #uri_path_components and record the first element\nin the value returned by …\n"],["uuid","ApiTools::Presenters::BaseDSL","classes/ApiTools/Presenters/BaseDSL.html#method-i-uuid","( field_name, options = nil )","<p>Declares that this Type or Resource _refers to_ another Resource instance\nvia its UUID. There&#39;s no …\n"],["valid?","ApiTools::UUID","classes/ApiTools/UUID.html#method-c-valid-3F","( uuid )","<p>Checks if a UUID string is valid. Returns <code>true</code> if so, else\n<code>false</code>.\n<p><code>uuid</code> &mdash; UUID string to validate. Must be …\n\n"],["validate","ApiTools::Presenters::Array","classes/ApiTools/Presenters/Array.html#method-i-validate","(data, path = '')","<p>Check if data is a valid Array and return an ApiTools::Errors instance\n"],["validate","ApiTools::Presenters::Base","classes/ApiTools/Presenters/Base.html#method-c-validate","( data, as_resource = false )","<p>Is the given rendering of a resource valid? Returns an array of Error\nPrimitive types (as hashes); this …\n"],["validate","ApiTools::Presenters::Boolean","classes/ApiTools/Presenters/Boolean.html#method-i-validate","(data, path = '')","<p>Check if data is a valid Boolean and return an ApiTools::Errors instance\n"],["validate","ApiTools::Presenters::Date","classes/ApiTools/Presenters/Date.html#method-i-validate","(data, path = '')","<p>Check if data is a valid Date and return an ApiTools::Errors instance\n"],["validate","ApiTools::Presenters::DateTime","classes/ApiTools/Presenters/DateTime.html#method-i-validate","(data, path = '')","<p>Check if data is a valid Datetime and return an ApiTools::Errors instance\n"],["validate","ApiTools::Presenters::Decimal","classes/ApiTools/Presenters/Decimal.html#method-i-validate","(data, path = '')","<p>Check if data is a valid Decimal and return an ApiTools::Errors instance\n"],["validate","ApiTools::Presenters::Enum","classes/ApiTools/Presenters/Enum.html#method-i-validate","(data, path = '')","<p>Check if data is a valid String and return an ApiTools::Errors instance\n"],["validate","ApiTools::Presenters::Field","classes/ApiTools/Presenters/Field.html#method-i-validate","(data, path = '')","<p>Check if data is required and return an ApiTools::Errors instance\n"],["validate","ApiTools::Presenters::Float","classes/ApiTools/Presenters/Float.html#method-i-validate","(data, path = '')","<p>Check if data is a valid Float and return an ApiTools::Errors instance\n"],["validate","ApiTools::Presenters::Hash","classes/ApiTools/Presenters/Hash.html#method-i-validate","(data, path = '')","<p>Check if data is a valid Hash and return an ApiTools::Errors instance\n"],["validate","ApiTools::Presenters::Integer","classes/ApiTools/Presenters/Integer.html#method-i-validate","(data, path = '')","<p>Check if data is a valid Integer and return an ApiTools::Errors instance\n"],["validate","ApiTools::Presenters::Object","classes/ApiTools/Presenters/Object.html#method-i-validate","(data, path = '')","<p>Check if data is a valid Object and return an ApiTools::Errors instance\nwith zero (valid) or more (has …\n"],["validate","ApiTools::Presenters::String","classes/ApiTools/Presenters/String.html#method-i-validate","(data, path = '')","<p>Check if data is a valid String and return an ApiTools::Errors instance\n"],["validate","ApiTools::Presenters::Text","classes/ApiTools/Presenters/Text.html#method-i-validate","(data, path = '')","<p>Check if data is a valid String and return an ApiTools::Errors instance\n"],["validate","ApiTools::Presenters::UUID","classes/ApiTools/Presenters/UUID.html#method-i-validate","(data, path = '')","<p>Check if data is a valid UUID and return an ApiTools::Errors instance\n"],["validate_each","UuidValidator","classes/UuidValidator.html#method-i-validate_each","( record, attribute, value )","<p>Any field this validator is applied to is considered valid if it is\n<code>nil</code> or a valid UUID. In the case …\n"],["version","ApiTools::ServiceInterface","classes/ApiTools/ServiceInterface.html#method-i-version","( major_version )","<p>Declare the <em>major</em> version of the interface being implemented. All\nservice endpoints appear at “/v{version}/{endpoint}” …\n"],["wait","ApiTools::Communicators::Pool","classes/ApiTools/Communicators/Pool.html#method-i-wait","( per_instance_timeout: THREAD_WAIT_TIMEOUT, communicator: nil )","<p>This method is only useful if there are any ApiTools::Communicators::Slow\nsubclass instances in the communication …\n"],["wait","ApiTools::Logger","classes/ApiTools/Logger.html#method-i-wait","()","<p>Wait for all writers to finish writing all log messages sent up to the\npoint of calling. Internal default …\n"],["wait","ApiTools::ServiceMiddleware::ExceptionReporting","classes/ApiTools/ServiceMiddleware/ExceptionReporting.html#method-c-wait","( timeout = 5 )","<p>Wait for all executing reporter threads to catch up before continuing.\n<p><code>timeout</code> &mdash; Optional timeout wait delay …\n\n"],["warn","ApiTools::Logger","classes/ApiTools/Logger.html#method-i-warn","( *args )","<p>Write a <code>warn</code> log message, provided the log level is\n<code>:debug</code>, <code>:info</code> or <code>:warn</code>.\n<p>The logging data is unstructured, …\n"],["README","","files/README_md.html","","<p>ApiTools\n<p><img\nsrc=\"https://magnum.travis-ci.com/LoyaltyNZ/api_tools.svg?token=qenLSjTyBsExZFCraVut&branch=master\">\n…\n"]]}}